extends ruby

snippet anr "and_raise" w
and_raise(${1:exception})
endsnippet

snippet anrb "and_return_block" w
and_return { $1 }
endsnippet

snippet andra "and_return_value" w
and_return(${1:value})
endsnippet

snippet ant "and_throw" w
and_throw(${1:sym})
endsnippet

snippet any "and_yield" w
and_yield(${1:values})
endsnippet

snippet annot "any_number_of_times" w
any_number_of_times
endsnippet

snippet atl "at_least" w
at_least(${1:n}).times
endsnippet

snippet atm "at_most" w
at_most(${1:n}).times
endsnippet

snippet cnf "configure"
RSpec.configure do |config|
  config.$0
end
endsnippet

snippet con "context"
context "${1:context}" do
  $0
end
endsnippet

snippet desc "controller_context"
require File.expand_path(File.dirname(__FILE__) + '/../spec_helper')

describe ${1:controller} do
  $0
end
endsnippet

snippet desrc "controller_context_RESTful"
describe ${1:controller}, "${2:GET|POST|PUT|DELETE} ${3:/some/path}${4: with some parameters}" do
  $0
end
endsnippet

snippet des "Describe"
describe "${1:subject}" do
  $0
end
endsnippet

snippet dest "Describe_type"
describe ${1:Type} do
  $0
end
endsnippet

snippet dests "Describe_type_string"
describe ${1:Type}, "${2:description}" do
  $0
end
endsnippet

snippet ex "exactly" w
exactly(${1:n}).times
endsnippet

# TODO: the middle tabstop on these next two should be $0, but UltiSnips
# doesn't handle this correctly yet
snippet its "it should"
it "should ${1:do something}"${2: do
  $3
end}
endsnippet

snippet it "It"
it "${1:does something}"${2: do
  $3
end}
endsnippet

snippet matc "Matcher (Custom)"
class ${1:ReverseTo}
  def initialize($3)
    @$3 = $3
  end

  def matches?(actual)
    @actual = actual
    # Satisfy expectation here. Return false or raise an error if it's not met.
    ${0:@actual.reverse.should == @$3}
    true
  end

  def failure_message_for_should
    "expected #{@actual.inspect} to $2 #{@$3.inspect}, but it didn't"
  end

  def failure_message_for_should_not
    "expected #{@actual.inspect} not to $2 #{@$3.inspect}, but it did"
  end
end

def ${2:reverse_to}(${3:expected})
  $1.new($3)
end
endsnippet

snippet mat "Matcher (DSL)"
RSpec::Matchers.define :${1:name} do |${2:expected}|
  match do |${3:actual}|
    $3.$1?($2)
  end
end

endsnippet

snippet moc "mock"
${1:var} = mock("${2:mock_name}"${3:, :null_object => true})
$0
endsnippet

snippet mm "mock_model"
mock_model(${1:model})$0
endsnippet

snippet mocw "mock_with"
RSpec::Runner.configure do |config|
        config.mock_with :${0:mocha|flexmock|rr}
end
endsnippet

snippet on "once" w
once
endsnippet

snippet reqs "Require spec_helper"
require 'spec_helper'


endsnippet

snippet shbs "response_should_be_success"
response.should be_success
$0
endsnippet

snippet shnbs "response_should_not_be_success"
response.should_not be_success
$0
endsnippet

snippet conn "Set Controller for Spec"
controller_name :${1:controller}
endsnippet

snippet bef "setup"
before(${1::each}) do
  $0
end
endsnippet

snippet sh= "should =="
${1:target}.should == ${2:value}
$0
endsnippet

snippet shm "should =~"
${1:target}.should =~ /${2:regexp}/
$0
endsnippet

snippet she "should eql"
${1:target}.should eql(${2:value})
$0
endsnippet

snippet shb "should_be"
${1:target}.should be(${2:result})
$0
endsnippet

snippet shbko "should_be_a_kind_of"
${1:target}.should be_a_kind_of(${2:klass})
$0
endsnippet

snippet shbio "should_be_an_instance_of"
${1:target}.should be_instance_of(${2:klass})
$0
endsnippet

snippet shbc "should_be_close"
${1:target}.should be_close(${2:result}, ${3:tolerance})
$0
endsnippet

snippet shbr "should_be_redirect"
response.should be_redirect
$0
endsnippet

snippet she "should_equal"
${1:target}.should equal(${2:value})
$0
endsnippet

snippet shh "should_have"
${1:target}.should have(${2:num}).${3:things}
$0
endsnippet

snippet shhal "should_have_at_least"
${1:target}.should have_at_least(${2:num}).${3:things}
$0
endsnippet

snippet shham "should_have_at_most"
${1:target}.should have_at_most(${2:num}).${3:things}
$0
endsnippet

snippet shhr "should_have_records"
${1:target}.should have(${2:x}).records
$0
endsnippet

snippet shm "should_match"
${1:target}.should match(/${2:regexp}/)
$0
endsnippet

snippet shn= "should_not =="
${1:target}.should_not == ${2:value}
$0
endsnippet

snippet shnm "should_not =~"
${1:target}.should_not =~ /${2:regexp}/
$0
endsnippet

snippet shne "should_not eql"
${1:target}.should_not eql(${2:value})
$0
endsnippet

snippet shnb "should_not_be"
${1:target}.should_not be(${2:result})
$0
endsnippet

snippet shkof "should_not_be_a_kind_of"
${1:target}.should_not be_a_kind_of(${2:klass})
$0
endsnippet

snippet shbio "should_not_be_an_instance_of"
${1:target}.should_not be_instance_of(${2:klass})
$0
endsnippet

snippet shnbc "should_not_be_close"
${1:target}.should_not be_close(${2:result}, ${3:tolerance})
$0
endsnippet

snippet shnbr "should_not_be_redirect"
response.should_not be_redirect
$0
endsnippet

snippet shne "should_not_equal"
${1:target}.should_not equal(${2:value})
$0
endsnippet

snippet shnm "should_not_match"
${1:target}.should_not match(/${2:regexp}/)
$0
endsnippet

snippet shnp "should_not_predicate"
${1:target}.should_not ${2:be_${3:predicate}} $4
$0
endsnippet

snippet shnre "should_not_raise"
lambda { $1 }.should_not raise_error(${2:error})
$0
endsnippet

snippet shnr "should_not_receive"
${1:mock}.should_not_receive(:${2:message})$3
$0

endsnippet

snippet shnrt "should_not_respond_to"
${1:target}.should_not respond_to(:${2:sym})
$0
endsnippet

snippet shns "should_not_satisfy"
${1:target}.should_not satisfy { |obj| $2 }
$0
endsnippet

snippet shnt "should_not_throw"
lambda { $1 }.should_not throw_symbol(:${2:symbol})
$0
endsnippet

snippet shp "should_predicate"
${1:target}.should ${2:be_${3:predicate}} $4
$0
endsnippet

snippet shre "should_raise"
lambda { $1 }.should raise_error(${2:error})
$0
endsnippet

snippet shr "should_receive"
${1:mock}.should_receive(:${2:message})$3
endsnippet

snippet wia "should_receive_with_args"
with(${1})$2
endsnippet

snippet shrt "should_redirect_to"
response.should redirect_to(${1:url})
$0
endsnippet

snippet shrt "should_render"
response.should render_template(:${1:template})
$0
endsnippet

snippet shrt "should_respond_to"
${1:target}.should respond_to(:${2:sym})
$0
endsnippet

snippet shs "should_satisfy"
${1:target}.should satisfy { |obj| $2 }
$0
endsnippet

snippet sht "should_throw"
lambda { $1 }.should throw_symbol(:${2:symbol})
$0
endsnippet

snippet stu "stub"
${1:double}.stub(:${2:message})$3
endsnippet

snippet aft "teardown"
after(${1::each}) do
  $0
end
endsnippet

snippet tw "twice" w
twice
endsnippet

snippet let "let"
let(:${1:symbol}) { $2 }
endsnippet

snippet letb "let block"
let :${1:symbol} do
  $2
end
$0
endsnippet

snippet subj "subject"
subject { $1 }
endsnippet

snippet exp "expect to"
expect do
  $1
end.to ${2:change {${3:subject}}.${4:from($5).to($6)}}
endsnippet

# vim:ft=rspec
